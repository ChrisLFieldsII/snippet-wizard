import { ServiceTag, Snippet, SnippetPrivacy } from '../src/types'

export const mockSnippets: Snippet[] = [
  {
    createdAt: '2022-03-07T20:39:42.000Z',
    updatedAt: '2022-03-07T20:39:42.000Z',
    contents: 'git log -1 --pretty="format:%ci" /path/to/repo/anyfile.any',
    description: '',
    filename: 'git-last-updated',
    id: '72dd8201330636f30f044ad4e3993d46',
    privacy: 'public',
    title: '',
    url: 'https://gist.github.com/72dd8201330636f30f044ad4e3993d46',
    service: 'github',
  },
  {
    createdAt: '2022-10-09T00:14:55.764Z',
    updatedAt: '2022-10-09T00:14:56.421Z',
    contents: 'echo "Hello world"',
    description: 'An example of how to echo hello world in bash',
    filename: 'example.sh',
    id: '2424054',
    privacy: 'public',
    title: 'Echo hello world in bash',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2424054',
    service: 'gitlab',
  },
  {
    createdAt: '2022-10-05T06:05:55.986Z',
    updatedAt: '2022-10-05T06:05:56.511Z',
    contents:
      'https://github.com/typescript-eslint/typescript-eslint/search?q=sort-type-union-intersection-members',
    description: '',
    filename: 'example.txt',
    id: '2422193',
    privacy: 'private',
    title: 'search github code by query string',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2422193',
    service: 'gitlab',
  },
  {
    createdAt: '2022-09-30T01:40:15.652Z',
    updatedAt: '2022-09-30T01:40:16.238Z',
    contents:
      'NotificationCenter.default.post(Notification(name: NSNotification.Name("RCTOpenURLNotification"), object: self, userInfo: ["url":"gamestop://cart"]))',
    description: '',
    filename: 'example.swift',
    id: '2419430',
    privacy: 'private',
    title: 'send open url event from swift to js',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2419430',
    service: 'gitlab',
  },
  {
    createdAt: '2022-09-22T19:28:54.132Z',
    updatedAt: '2022-09-22T19:28:54.700Z',
    contents: 'adb reverse tcp:9090 tcp:9090',
    description: '',
    filename: 'script.sh',
    id: '2415470',
    privacy: 'private',
    title: 'enable reactotron logs for android',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2415470',
    service: 'gitlab',
  },
  {
    createdAt: '2022-09-20T17:38:02.082Z',
    updatedAt: '2022-09-20T17:38:02.764Z',
    contents: 'adb logcat -s "tag"',
    description: '',
    filename: 'script.sh',
    id: '2413293',
    privacy: 'private',
    title: 'adb logcat for specific log tag',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2413293',
    service: 'gitlab',
  },
  {
    createdAt: '2022-08-10T21:20:00.683Z',
    updatedAt: '2022-08-10T21:20:01.286Z',
    contents: 'adb logcat --pid=$(adb shell pidof -s com.gamestop.powerup.dev)',
    description: 'this helps see logs for specific app process id',
    filename: 'script.sh',
    id: '2386526',
    privacy: 'private',
    title: 'adb logcat for specific app process id',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2386526',
    service: 'gitlab',
  },
  {
    createdAt: '2022-08-02T17:14:18.412Z',
    updatedAt: '2022-08-02T17:14:19.025Z',
    contents:
      'return Bundle.main.url(forResource: "main", withExtension: "jsbundle")',
    description:
      'return this instead of `return CodePush.bundleURL();` in `func sourceURL()` to use the included bundle instead of the remote appcenter bundle',
    filename: 'example.swift',
    id: '2381366',
    privacy: 'private',
    title: 'Use local AppDelegate bundle',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2381366',
    service: 'gitlab',
  },
  {
    createdAt: '2022-07-22T21:51:29.741Z',
    updatedAt: '2022-07-22T21:57:18.394Z',
    contents:
      'git config --global core.ignorecase false && git config --local core.ignorecase false',
    description:
      'the codebase underwent a file casing refactor and we had to configure some things in git for file casing since OS do it differently.',
    filename: 'script.sh',
    id: '2375721',
    privacy: 'private',
    title: 'Git - global file casing settings',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2375721',
    service: 'gitlab',
  },
  {
    createdAt: '2022-07-21T23:33:29.962Z',
    updatedAt: '2022-07-21T23:33:29.962Z',
    contents: 'rm -rf node_modules && cd ios && rm -rf Pods && cd .. && yarn',
    description: 'rm `node_modules` and `Pods` and reinstall it',
    filename: 'script.sh',
    id: '2374946',
    privacy: 'private',
    title: 'Reset node_modules and Pods',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2374946',
    service: 'gitlab',
  },
  {
    createdAt: '2022-07-06T00:53:50.967Z',
    updatedAt: '2022-07-06T00:53:50.967Z',
    contents:
      'adb shell setprop debug.firebase.analytics.app com.gamestop.powerup.dev',
    description:
      'Use this snippet to see firebase debugview from an endroid emulator',
    filename: 'example.sh',
    id: '2365712',
    privacy: 'private',
    title: 'Enable firebase debug mode on Android emulator',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2365712',
    service: 'gitlab',
  },
  {
    createdAt: '2022-05-24T16:29:57.108Z',
    updatedAt: '2022-05-24T16:29:57.108Z',
    contents: 'git name-rev --tags --name-only <SHA>',
    description:
      'Useful snippet to determine which git tag introduced a commit',
    filename: 'git-first-tag-with-commit.sh',
    id: '2331768',
    privacy: 'private',
    title: 'Git - How to find the first tag that contains a git commit',
    url: 'https://gitlab.com/gamestopcorp/ecom/native-app/gs-mobile-app-v2.0/-/snippets/2331768',
    service: 'gitlab',
  },
  {
    createdAt: '2022-10-09T00:10:57.000Z',
    updatedAt: '2022-10-09T00:11:09.000Z',
    contents: 'echo "Hello world"',
    description: '',
    filename: 'example.sh',
    id: '7631412243b8895f2e1f904359f12919',
    privacy: 'public',
    title: 'Echo hello world in bash',
    url: 'https://gist.github.com/7631412243b8895f2e1f904359f12919',
    service: 'github',
  },
  {
    createdAt: '2022-10-07T01:31:21.000Z',
    updatedAt: '2022-10-07T01:31:21.000Z',
    contents:
      "import AsyncStorage from '@react-native-async-storage/async-storage';\\nimport * as SecureStorage from 'expo-secure-store';\\n\\n/**\\n * The AsyncKey is not secure and will not persist data through app uninstall and reinstall\\n */\\nclass AsyncKey extends Key {\\n  constructor(public key: string, private onError?: ErrorHandler) {\\n    super();\\n  }\\n\\n  async get() {\\n    return AsyncStorage.getItem(this.key).catch(e => {\\n      this.onError?.(e);\\n    });\\n  }\\n\\n  async set(value: string) {\\n    await AsyncStorage.setItem(this.key, value).catch(e => {\\n      this.onError?.(e);\\n    });\\n  }\\n\\n  async delete() {\\n    await AsyncStorage.removeItem(this.key).catch(e => {\\n      this.onError?.(e);\\n    });\\n  }\\n\\n  async getBoolean(): Promise<boolean> {\\n    return (await this.get()) === 'true';\\n  }\\n}\\n\\n/**\\n * The secure key will persist data between app uninstall and reinstall\\n * on top of keeping things secure!\\n */\\nclass SecureKey extends Key {\\n  constructor(public key: string, private onError?: ErrorHandler) {\\n    super();\\n  }\\n\\n  async get() {\\n    return SecureStorage.getItemAsync(this.key).catch(e => {\\n      this.onError?.(e);\\n    });\\n  }\\n\\n  async set(value: string) {\\n    await SecureStorage.setItemAsync(this.key, value).catch(e => {\\n      this.onError?.(e);\\n    });\\n  }\\n\\n  async delete() {\\n    await SecureStorage.deleteItemAsync(this.key);\\n  }\\n}\\n\\n/**\\n * @desc Stores secure keys that may be over 2048 size limit by breaking\\n * the stored value into parts.\\n */\\nexport class MultipartSecureKey extends Key {\\n  /** @desc Array of keys where each key is used to get/set/delete a stored part */\\n  private keys: string[];\\n\\n  constructor(\\n    public key: string,\\n    private parts: number = 2,\\n    private onError?: ErrorHandler,\\n  ) {\\n    super();\\n    this.keys = new Array(this.parts)\\n      .fill(undefined)\\n      .map((_, index) => `${this.key}-${index}`);\\n  }\\n\\n  async get() {\\n    try {\\n      const promises = this.keys.map(key => SecureStorage.getItemAsync(key));\\n      const values = await Promise.all(promises);\\n\\n      if (values.includes(null)) {\\n        return null;\\n      }\\n\\n      const value = (values as string[]).reduce((accum, currValue) => {\\n        return accum.concat(currValue);\\n      }, '');\\n\\n      return value;\\n    } catch (error) {\\n      this.onError?.(error);\\n    }\\n  }\\n\\n  async set(value: string) {\\n    // size of each part\\n    const partLength = Math.ceil(value.length / this.parts);\\n\\n    // array of parts to store\\n    const chunks = this.chunkString(value, partLength) || [];\\n\\n    try {\\n      const promises = chunks.map((chunk, index) =>\\n        SecureStorage.setItemAsync(this.keys[index], chunk),\\n      );\\n      await Promise.all(promises);\\n    } catch (error) {}\\n  }\\n\\n  async delete() {\\n    this.keys.forEach(key => {\\n      SecureStorage.deleteItemAsync(key).catch(() => {});\\n    });\\n  }\\n\\n  // https://stackoverflow.com/a/7033662/5434172\\n  private chunkString(str: string, length: number) {\\n    return str.match(new RegExp('.{1,' + length + '}', 'g'));\\n  }\\n}",
    description: '',
    filename: 'storage-real-world-example.ts',
    id: 'f2dce721b77627e37d60846c84d9ff26',
    privacy: 'public',
    title: 'storage-real-world-example',
    url: 'https://gist.github.com/f2dce721b77627e37d60846c84d9ff26',
    service: 'github',
  },
  {
    createdAt: '2022-10-07T00:57:54.000Z',
    updatedAt: '2022-10-07T00:57:54.000Z',
    contents:
      "/**\\n * Convenience storage object that wraps `TypedStorage` to provide\\n * common functionalities like using a key, clearing whole storage,\\n * getting storage as json, etc.\\n *\\n * You don't have to use this. You can instead use the `TypedStorage` storage directly\\n * or create your own abstraction!\\n */\\nexport class JSStorage<T extends KeyId> implements IStorage<T> {\\n  constructor(private storage: TypedStorage<T>) {\\n    this.use = this.use.bind(this);\\n    this.clear = this.clear.bind(this);\\n    this.getJSON = this.getJSON.bind(this);\\n  }\\n\\n  use(key: T): Key<T> {\\n    return this.storage[key];\\n  }\\n\\n  async clear(): Promise<void> {\\n    const { storage } = this;\\n\\n    const keys = Object.keys(storage) as T[];\\n\\n    const promises = keys.map((key) => {\\n      return storage[key].delete();\\n    });\\n\\n    await Promise.all(promises);\\n  }\\n\\n  async getJSON(): Promise<Record<T, string | undefined | null>> {\\n    const { storage } = this;\\n\\n    const keys = Object.keys(storage) as T[];\\n\\n    const promises = keys.map((key) => {\\n      return storage[key].get();\\n    });\\n\\n    const values = await Promise.all(promises);\\n\\n    return keys.reduce((accum, key, index) => {\\n      return {\\n        ...accum,\\n        [key]: values[index],\\n      };\\n    }, {} as Record<T, string | undefined | null>);\\n  }\\n}\\n",
    description: '',
    filename: 'js-storage.ts',
    id: '5992f97e2570e2fdb919cc2e288def6a',
    privacy: 'public',
    title: 'JSStorage',
    url: 'https://gist.github.com/5992f97e2570e2fdb919cc2e288def6a',
    service: 'github',
  },
  {
    createdAt: '2022-10-07T00:53:19.000Z',
    updatedAt: '2022-10-07T00:53:19.000Z',
    contents:
      "/**\\n * your storage is just an object where value is of subclass `Key`\\n */\\nconst typedStorage: TypedStorage<StorageId> = {\\n  boolType: new MysteriousKey('boolType'),\\n  numType: new MultipartSecureKey('numType'),\\n  dateType: new SessionKey('dateType'),\\n  jsonType: new SecureKey('jsonType'),\\n};",
    description: '',
    filename: 'key-storage.ts',
    id: '3ddc21ea41ad48beeb3adab71becb47c',
    privacy: 'public',
    title: 'Key storage',
    url: 'https://gist.github.com/3ddc21ea41ad48beeb3adab71becb47c',
    service: 'github',
  },
  {
    createdAt: '2022-10-07T00:46:33.000Z',
    updatedAt: '2022-10-07T00:46:34.000Z',
    contents:
      "type StorageId = 'persistentName' | 'sessionName';\\n\\nclass LocalStorageKey extends Key<StorageId> {\\n  async get(): Promise<string | null> {\\n    return localStorage.getItem(this.name);\\n  }\\n\\n  async set(value: string): Promise<void> {\\n    await localStorage.setItem(this.name, value);\\n  }\\n\\n  async delete(): Promise<void> {\\n    await localStorage.removeItem(this.name);\\n  }\\n}\\n\\nclass SessionStorageKey extends Key<StorageId> {\\n  async get(): Promise<string | null> {\\n    return sessionStorage.getItem(this.name);\\n  }\\n\\n  async set(value: string): Promise<void> {\\n    await sessionStorage.setItem(this.name, value);\\n  }\\n\\n  async delete(): Promise<void> {\\n    await sessionStorage.removeItem(this.name);\\n  }\\n}",
    description: '',
    filename: 'key-implementations.ts',
    id: '0555be6120ee9d64c383834eace7662c',
    privacy: 'public',
    title: 'Key Implementations',
    url: 'https://gist.github.com/0555be6120ee9d64c383834eace7662c',
    service: 'github',
  },
  {
    createdAt: '2022-10-07T00:28:35.000Z',
    updatedAt: '2022-10-07T00:28:35.000Z',
    contents:
      "/**\\n * Abstract class to implement your keys.\\n * Keys can be powered by any storage system!\\n *\\n * Only need to override `get`, `set`, `delete`.\\n */\\nexport abstract class Key<T extends KeyId> implements IKey {\\n  constructor(public name: T) {}\\n\\n  abstract get(): Promise<string | null>;\\n  abstract set(value: string): Promise<void>;\\n  abstract delete(): Promise<void>;\\n\\n  async getBoolean(): Promise<boolean> {\\n    return (await this.get()) === 'true';\\n  }\\n  async setBoolean(value: boolean): Promise<void> {\\n    await this.set(value ? 'true' : 'false');\\n  }\\n\\n  async getNumber(): Promise<number> {\\n    return Number(await this.get());\\n  }\\n  async setNumber(value: number): Promise<void> {\\n    await this.set(value.toString());\\n  }\\n\\n  async getDate(): Promise<Date> {\\n    return new Date((await this.get()) as string);\\n  }\\n  async setDate(value: Date): Promise<void> {\\n    await this.set(value.toISOString());\\n  }\\n\\n  async getJSON<T>(): Promise<T> {\\n    return JSON.parse((await this.get()) as string) as T;\\n  }\\n  async setJSON(value: any): Promise<void> {\\n    await this.set(JSON.stringify(value));\\n  }\\n}",
    description: '',
    filename: 'Key.ts',
    id: '0edf9ab06ca451433461833c898b7ae7',
    privacy: 'public',
    title: 'js-storage-abstraction:Key',
    url: 'https://gist.github.com/0edf9ab06ca451433461833c898b7ae7',
    service: 'github',
  },
  {
    createdAt: '2022-07-25T22:12:59.000Z',
    updatedAt: '2022-07-25T22:13:21.000Z',
    contents: 'git config --global core.editor "code -w"',
    description: '',
    filename: 'script.sh',
    id: 'f8d6262f44790d1b7d252c93edc95520',
    privacy: 'private',
    title: '',
    url: 'https://gist.github.com/f8d6262f44790d1b7d252c93edc95520',
    service: 'github',
  },
  {
    createdAt: '2022-07-24T05:03:47.000Z',
    updatedAt: '2022-07-24T05:04:02.000Z',
    contents:
      "module.exports = {\\n  bracketSpacing: true,\\n  jsxBracketSameLine: false,\\n  singleQuote: true,\\n  trailingComma: 'all',\\n  arrowParens: 'avoid',\\n};\\n",
    description: '',
    filename: '.prettierrc.js',
    id: 'c5b0dfe513b77bef419ab3225421ca83',
    privacy: 'private',
    title: '',
    url: 'https://gist.github.com/c5b0dfe513b77bef419ab3225421ca83',
    service: 'github',
  },
  {
    createdAt: '2022-06-03T17:39:40.000Z',
    updatedAt: '2022-06-03T17:40:49.000Z',
    contents: 'git rev-list --all | xargs git grep "search"',
    description: '',
    filename: 'git-grep-codebase.sh',
    id: '72d08b83d2dcd54d4f75bb3b6c375656',
    privacy: 'private',
    title: 'search git codebase for some code',
    url: 'https://gist.github.com/72d08b83d2dcd54d4f75bb3b6c375656',
    service: 'github',
  },
  {
    createdAt: '2022-05-20T02:17:17.000Z',
    updatedAt: '2022-06-03T17:40:53.000Z',
    contents: 'git log --all --grep=""',
    description: '',
    filename: 'git-grep-commit-msgs',
    id: '2a026d0cd73097354a2f7e24d04c4d86',
    privacy: 'private',
    title: '',
    url: 'https://gist.github.com/2a026d0cd73097354a2f7e24d04c4d86',
    service: 'github',
  },
  {
    createdAt: '2022-05-15T06:18:31.000Z',
    updatedAt: '2022-06-03T17:40:56.000Z',
    contents: 'git rev-parse --abbrev-ref HEAD',
    description: '',
    filename: 'git-print-curr-branch-name.sh',
    id: '7d38b2205c3c22a673e6f902fe9ac23c',
    privacy: 'private',
    title: '',
    url: 'https://gist.github.com/7d38b2205c3c22a673e6f902fe9ac23c',
    service: 'github',
  },
  {
    createdAt: '2022-05-14T19:49:33.000Z',
    updatedAt: '2022-06-03T17:40:59.000Z',
    contents: 'git name-rev --tags --name-only <SHA>',
    description: '',
    filename: 'how-to-find-the-first-tag-that-contains-a-git-commit.sh',
    id: 'b396fef02e9b69e5611f5466fbd957d8',
    privacy: 'private',
    title: '',
    url: 'https://gist.github.com/b396fef02e9b69e5611f5466fbd957d8',
    service: 'github',
  },
].map((rawSnippet) => ({
  ...rawSnippet,
  createdAt: new Date(rawSnippet.createdAt),
  updatedAt: new Date(rawSnippet.updatedAt),
  privacy: rawSnippet.privacy as SnippetPrivacy,
  service: rawSnippet.service as ServiceTag,
}))
